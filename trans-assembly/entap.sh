#!/bin/bash

#SBATCH --account=PAS0471
#SBATCH --time=36:00:00
#SBATCH --cpus-per-task=12
#SBATCH --output=slurm-entap-%j.out

# PARSE OPTIONS ----------------------------------------------------------------
## Help function
Help() {
  echo
  echo "$0: Run EnTAP version 0.10.8 to annotate a transcriptome assembly."
  echo
  echo "Syntax: $0 -i <genome-FASTA> -c <config-file> -o <output-dir>..."
  echo
  echo "Required options:"
  echo "    -i FILE         Input assembly (nucleotide) FASTA file"
  echo "    -c FILE         Input EnTap config file"
  echo "                    This file can be generated by running 'entap_config.sh' (present in same dir as this script),"
  echo "                    or you can directly use the config file 'entap_config.ini' (also present in same dir as this script)"
  echo "                    Make sure to change 'taxon=' and 'contam=' to appropriate values in the config file!"
  echo "    -o DIR          Output dir"
  echo
  echo "Other options:"
  echo "    -d STRING       Space-separated list of DIAMOND database files ('.dmnd') to use, ADDING TO the default databases"
  echo "    -D STRING       Space-separated list of DIAMOND database files ('.dmnd') to use, REPLACING the default databases"
  echo "                    The default databases are:"
  echo "                            /fs/project/PAS0471/jelmer/refdata/entap/bin/refseq_complete.dmnd"
  echo "                            /fs/project/PAS0471/jelmer/refdata/entap/bin/uniprot_sprot.dmnd"
  echo "    -b FILE         Input BAM filename"
  echo "                    Default is to run without a BAM file and therefore without expression level filtering"
  echo "    -a STRING       Other argument(s) to pass to EnTAP"
  echo "    -h              Print this help message and exit"
  echo
  echo "Example:    $0 -i assembly.fa -c entap_config.ini -d uniprot_sprot.dmnd -o results/entap"
  echo "To submit the OSC queue, preface with 'sbatch': sbatch $0 ..."
  echo
  echo "EnTAP documentation: https://entap.readthedocs.io/en/latest/"
  echo "EnTAP paper: https://onlinelibrary.wiley.com/doi/10.1111/1755-0998.13106"
  echo
}

## Option defaults
assembly=""
dbs_add=""
dbs_replace=""
outdir=""
config_file=""
bam=""
more_args=""

## Parse command-line options
while getopts 'i:d:D:o:c:b:a:h' flag; do
  case "${flag}" in
    i) assembly="$OPTARG" ;;
    c) config_file="$OPTARG" ;;
    o) outdir="$OPTARG" ;;
    d) dbs_add="$OPTARG" ;;
    D) dbs_replace="$OPTARG" ;;
    b) bam="$OPTARG" ;;
    a) more_args="$OPTARG" ;;
    h) Help && exit 0 ;;
    \?) echo -e "\n## $0: ERROR: Invalid option -$OPTARG\n\n" >&2 && exit 1 ;;
    :) echo -e "\n## $0: ERROR: Option -$OPTARG requires an argument\n\n" >&2 && exit 1 ;;
  esac
done


# CONSTANTS --------------------------------------------------------------------
REFSEQ_DB=/fs/project/PAS0471/jelmer/refdata/entap/bin/refseq_complete.dmnd
UNIPROT_DB=/fs/project/PAS0471/jelmer/refdata/entap/bin/uniprot_sprot.dmnd


# SETUP ------------------------------------------------------------------------
## Software
module load python/3.6-conda5.2
source activate /fs/project/PAS0471/jelmer/conda/entap-0.10.8

## Bash strict mode
set -euo pipefail

## Build database argument for EnTap
dbs_default_arg="-d $REFSEQ_DB -d $UNIPROT_DB"
if [[ "$dbs_add" != "" ]]; then
    db_arg="$dbs_default_arg -d ${dbs_add// / -d }"
elif [[ "$dbs_replace" != "" ]]; then
    db_arg="-d ${dbs_replace// / -d }"
else
    db_arg="$dbs_default_arg"
fi

## Make paths absolute, or EnTap will fail
[[ ! $config_file =~ ^/ ]] && config_file="$PWD"/"$config_file"
[[ ! $assembly =~ ^/ ]] && assembly="$PWD"/"$assembly"
[[ ! $outdir =~ ^/ ]] && outdir="$PWD"/"$outdir"

## Report
echo
echo "## Starting script entap.sh"
date
echo
echo "## Input assembly:                       $assembly"
echo "## Config file:                          $config_file"
echo "## Input database argument:              $db_arg"
echo "## Output dir:                           $outdir"
[[ "$bam" != "" ]] && echo "## Input BAM file:                       $bam"
[[ "$more_args" != "" ]] && echo "## Other arguments to pass to EnTAP:     $more_args"
echo -e "--------------------\n"


# RUN ENTAP CONFIG -------------------------------------------------------------
echo "## Now running EnTAP..."
EnTAP \
    --runP \
    --ini "$config_file" \
    -i "$assembly" \
    $db_arg \
    --out-dir "$outdir" \
    -t "$SLURM_CPUS_PER_TASK" $more_args


# WRAP-UP ----------------------------------------------------------------------
echo -e "\n-------------------------------"
echo "## Listing files in the output dir:"
ls -lh "$outdir"
echo -e "\n## Done with script entap.sh"
date
echo
sacct -j "$SLURM_JOB_ID" -o JobID,AllocTRES%50,Elapsed,CPUTime,TresUsageInTot,MaxRSS
echo
